--- decompiled/TerrariaServerWindows/Terraria/DataStructures/PlayerDrawHeadLayers.cs
+++ decompiled/TerrariaServerLinux/Terraria/DataStructures/PlayerDrawHeadLayers.cs
@@ -107,8 +_,8 @@
 		int usedGravDir = 1;
 		Vector2 vector = DrawPlayer_04_GetHatDrawPosition(ref drawinfo, new Vector2(1f, -26f), usedGravDir);
 		int hatStacks = GetHatStacks(ref drawinfo, 4955);
-		float num = (float)Math.PI / 60f;
+		float num = MathF.PI / 60f;
-		float num2 = num * drawinfo.drawPlayer.position.X % ((float)Math.PI * 2f);
+		float num2 = num * drawinfo.drawPlayer.position.X % (MathF.PI * 2f);
 		for (int num3 = hatStacks - 1; num3 >= 0; num3--) {
 			float x = Vector2.UnitY.RotatedBy(num2 + num * (float)num3).X * ((float)num3 / 30f) * 2f - (float)(num3 * 2 * drawinfo.drawPlayer.direction);
 			QuickCDD(drawinfo.DrawData, drawinfo.cHead, value, vector + new Vector2(x, (float)(num3 * -14) * drawinfo.scale), rectangle, drawinfo.colorArmorHead, drawinfo.drawPlayer.headRotation, origin, drawinfo.scale, drawinfo.playerEffect, 0f);
@@ -132,8 +_,8 @@
 		int num = 1;
 		Vector2 vector = DrawPlayer_04_GetHatDrawPosition(ref drawinfo, new Vector2(0f, -9f), num);
 		int hatStacks = GetHatStacks(ref drawinfo, 5004);
-		float num2 = (float)Math.PI / 60f;
+		float num2 = MathF.PI / 60f;
-		float num3 = num2 * drawinfo.drawPlayer.position.X % ((float)Math.PI * 2f);
+		float num3 = num2 * drawinfo.drawPlayer.position.X % (MathF.PI * 2f);
 		int num4 = hatStacks * 4 + 2;
 		int num5 = 0;
 		bool flag = (Main.GlobalTimeWrappedHourly + 180f) % 600f < 60f;
