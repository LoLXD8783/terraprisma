--- decompiled/TerrariaServerWindows/Terraria/GameContent/PortalHelper.cs
+++ decompiled/TerrariaServerLinux/Terraria/GameContent/PortalHelper.cs
@@ -158,7 +_,7 @@
 				}
 				if (ent.velocity == Vector2.Zero)
 				{
-					ent.velocity = (projectile.ai[0] - (float)Math.PI / 2f).ToRotationVector2() * num3;
+					ent.velocity = (projectile.ai[0] - MathF.PI / 2f).ToRotationVector2() * num3;
 				}
 				if (ent.velocity.Length() < num3)
 				{
@@ -227,7 +_,7 @@
 			if (Vector2.Dot(EDGES[i], vector) > 0f && FindValidLine(position, (int)EDGES[i].Y, (int)(0f - EDGES[i].X), out var bestPosition))
 			{
 				vector2 = new Vector2(bestPosition.X * 16 + 8, bestPosition.Y * 16 + 8);
-				return AddPortal(theBolt, vector2 - EDGES[i] * (flag ? 0f : 8f), (float)Math.Atan2(EDGES[i].Y, EDGES[i].X) + (float)Math.PI / 2f, (int)theBolt.ai[0], theBolt.direction);
+				return AddPortal(theBolt, vector2 - EDGES[i] * (flag ? 0f : 8f), (float)Math.Atan2(EDGES[i].Y, EDGES[i].X) + MathF.PI / 2f, (int)theBolt.ai[0], theBolt.direction);
 			}
 		}
 		if (num != 0)
@@ -236,7 +_,7 @@
 			if (Vector2.Dot(value, -vector) > 0f && FindValidLine(position, -SLOPE_OFFSETS[num - 1].Y, SLOPE_OFFSETS[num - 1].X, out var bestPosition2))
 			{
 				vector2 = new Vector2(bestPosition2.X * 16 + 8, bestPosition2.Y * 16 + 8);
-				return AddPortal(theBolt, vector2, (float)Math.Atan2(value.Y, value.X) - (float)Math.PI / 2f, (int)theBolt.ai[0], theBolt.direction);
+				return AddPortal(theBolt, vector2, (float)Math.Atan2(value.Y, value.X) - MathF.PI / 2f, (int)theBolt.ai[0], theBolt.direction);
 			}
 		}
 		return -1;
@@ -399,7 +_,7 @@
 
 	private static Vector2 GetPortalOutingPoint(Vector2 objectSize, Vector2 portalPosition, float portalAngle, out int bonusX, out int bonusY)
 	{
-		int num = (int)Math.Round(MathHelper.WrapAngle(portalAngle) / ((float)Math.PI / 4f));
+		int num = (int)Math.Round(MathHelper.WrapAngle(portalAngle) / (MathF.PI / 4f));
 		switch (num)
 		{
 			case -2:
@@ -469,7 +_,7 @@
 	public static bool SupportedTilesAreFine(Vector2 portalCenter, float portalAngle)
 	{
 		Point point = portalCenter.ToTileCoordinates();
-		int num = (int)Math.Round(MathHelper.WrapAngle(portalAngle) / ((float)Math.PI / 4f));
+		int num = (int)Math.Round(MathHelper.WrapAngle(portalAngle) / (MathF.PI / 4f));
 		int num2;
 		int num3;
 		switch (num)
