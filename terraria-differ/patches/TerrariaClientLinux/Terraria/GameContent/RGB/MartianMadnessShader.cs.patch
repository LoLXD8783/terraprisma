--- decompiled/TerrariaClientWindows/Terraria/GameContent/RGB/MartianMadnessShader.cs
+++ decompiled/TerrariaClientLinux/Terraria/GameContent/RGB/MartianMadnessShader.cs
@@ -48,10 +_,10 @@
 			ProcessLowDetail(device, fragment, quality, time);
 			return;
 		}
-		float num = time * 0.5f % ((float)Math.PI * 2f);
+		float num = time * 0.5f % (MathF.PI * 2f);
-		if (num > (float)Math.PI)
+		if (num > MathF.PI)
 		{
-			num = (float)Math.PI * 2f - num;
+			num = MathF.PI * 2f - num;
 		}
 		Vector2 vector = new Vector2(1.7f + (float)Math.Cos(num) * 2f, -0.5f + (float)Math.Sin(num) * 1.1f);
 		for (int i = 0; i < fragment.Count; i++)
@@ -62,7 +_,7 @@
 			if (canvasPositionOfIndex.Y > vector.Y && num2 < 0.2f)
 			{
 				float num3 = 1f - MathHelper.Clamp((num2 - 0.2f + 0.2f) / 0.2f, 0f, 1f);
-				float num4 = Math.Abs((num - (float)Math.PI / 2f) / ((float)Math.PI / 2f));
+				float num4 = Math.Abs((num - MathF.PI / 2f) / (MathF.PI / 2f));
 				num4 = Math.Max(0f, 1f - num4 * 3f);
 				vector2 = Vector4.Lerp(vector2, _beamColor, num3 * num4);
 			}
